# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #Контейнер с PHP, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: otus/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    volumes:
       - ./code:/data/mysite.local
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      REDIS_SERVER: ${REDIS_SERVER}
      REDIS_PORT: ${REDIS_PORT}
      MEMCACHED_SERVER: ${MEMCACHED_SERVER}
      MEMCACHED_PORT: ${MEMCACHED_PORT}

  #контейнер с redis
  redis :
    image: redis:latest
    container_name : ${REDIS_SERVER}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - ./redis/redis.conf:/redis.conf
    command: [ "redis-server", "/redis.conf" ]
    networks:
      - app-network

  # контейнер с memcached
  memcached:
    image: memcached:latest
    container_name: ${MEMCACHED_SERVER}
    ports:
      - ${MEMCACHED_PORT}:${MEMCACHED_PORT}
    networks:
      - app-network

  #контейнер с Nginx
  webserver:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: otus/nginx-test3
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
      - "443:443"
    volumes:
       - ./code:/data/mysite.local
    networks:
      - app-network

  # контейнер с MySQL
  # строим на базе стандартного образа
  db:
    image: mysql:5.7.22
    container_name: ${MYSQL_HOST}
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    # описываем, какую БД мы создаём
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./dbdata:/var/lib/mysql  
    networks:
      - app-network



#Docker Networks
networks:
  app-network:
    driver: bridge