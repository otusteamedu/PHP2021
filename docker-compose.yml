version: "3"

services:
  #балансировка
  balancer:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: dockerapp/nginx
    container_name: webserver
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./code:/data/mysite.local
      - ./nginx/hosts/mysite.local.conf:/etc/nginx/sites-enabled/mysite.local.conf
    networks:
      - app-network

  #контейнер с Nginx
  nginx1:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: dockerapp/nginx
    container_name: nginx1
    ports:
      - "8081:80"
    volumes:
      - ./code:/data/mysite.local
      - ./nginx/hosts/mysite.local.conf:/etc/nginx/sites-enabled/mysite.local.conf
    networks:
      - app-network
    
    #контейнер с Nginx
  nginx2:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: dockerapp/nginx
    container_name: nginx2
    ports:
      - "8082:80"
    volumes:
      - ./code:/data/mysite.local
      - ./nginx/hosts/mysite.local.conf:/etc/nginx/sites-enabled/mysite.local.conf
    networks:
      - app-network
      
  #контейнер с php
  app1:
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: dockerapp/php
    container_name: app1
    volumes:
      - ./code:/data/mysite.local
      - ./fpm/php.ini:/usr/local/etc/php/conf.d/php-custom.ini
    networks:
      - app-network
      
   #контейнер с php
  app2:
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: dockerapp/php
    container_name: app2
    volumes:
      - ./code:/data/mysite.local
      - ./fpm/php.ini:/usr/local/etc/php/conf.d/php-custom.ini
    networks:
      - app-network
   
  db:
    image: mysql
    container_name: db
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} 
    volumes:
      - ./dbdata:/var/lib/mysql
    networks:
      - app-network
    
  memcached:
    image: memcached
    container_name: memcached
    ports:
      - "11212:11211"
    networks:
      - app-network
    
#Docker Networks
networks:
  app-network:
    driver: bridge