# версия синтаксиса
version: '3'

# в этом блоке мы описываем контейнеры, которые будут запускаться
services:
  #Контейнер с PHP, назовём его app
  app:
    # Если нет секции build, то система будет искать образ в репозиториях
    build:
      context: ./fpm
      dockerfile: Dockerfile
    image: otusapp/php # имя будущего образа
    container_name: app # имя контейнера после запуска
    volumes:
      - ./code:/data/mysite.local
      - ./phpsocket:/var/run/php
      - ./fpm/config/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
      - ./fpm/config/www.conf:/usr/local/etc/php-fpm.d/www.conf
    # мы можем создать для контейнеров внутреннюю сеть
    networks:
      - app-network

  #контейне с Nginx
  webserver:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: otusapp/nginx
    container_name: webserver
    # проброс портов
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/hosts/mysite.local.conf:/etc/nginx/sites-enabled/mysite.local.conf
      - ./code:/data/mysite.local
      - ./phpsocket:/var/run/php
    networks:
      - app-network

  # контейнер с MySQL
  # строим на базе стандартного образа
  db:
    image: mysql
    container_name: db
    ports:
      - "3306:3306"
    # описываем, какую БД мы создаём
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./dbdata:/var/lib/mysql  
    networks:
      - app-network

  memcached:
    image: memcached
    container_name: memcached
    networks:
      - app-network

  redis:
    image: redis
    container_name: redis
    volumes:
      - ./redis/data:/data
    networks:
      - app-network

#Docker Networks
networks:
  app-network:
    driver: bridge